// Generated by Ignite ignite.com/cli
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
import { Registry } from "@cosmjs/proto-signing";
import { IgniteClient } from "./client";
import { MissingWalletError } from "./helpers";
import { Module as CosmosAuthV1Beta1, msgTypes as CosmosAuthV1Beta1MsgTypes } from "./cosmos.auth.v1beta1";
import { Module as CosmosAuthzV1Beta1, msgTypes as CosmosAuthzV1Beta1MsgTypes } from "./cosmos.authz.v1beta1";
import { Module as CosmosBankV1Beta1, msgTypes as CosmosBankV1Beta1MsgTypes } from "./cosmos.bank.v1beta1";
import { Module as CosmosBaseTendermintV1Beta1, msgTypes as CosmosBaseTendermintV1Beta1MsgTypes } from "./cosmos.base.tendermint.v1beta1";
import { Module as CosmosCrisisV1Beta1, msgTypes as CosmosCrisisV1Beta1MsgTypes } from "./cosmos.crisis.v1beta1";
import { Module as CosmosDistributionV1Beta1, msgTypes as CosmosDistributionV1Beta1MsgTypes } from "./cosmos.distribution.v1beta1";
import { Module as CosmosEvidenceV1Beta1, msgTypes as CosmosEvidenceV1Beta1MsgTypes } from "./cosmos.evidence.v1beta1";
import { Module as CosmosFeegrantV1Beta1, msgTypes as CosmosFeegrantV1Beta1MsgTypes } from "./cosmos.feegrant.v1beta1";
import { Module as CosmosGovV1, msgTypes as CosmosGovV1MsgTypes } from "./cosmos.gov.v1";
import { Module as CosmosGovV1Beta1, msgTypes as CosmosGovV1Beta1MsgTypes } from "./cosmos.gov.v1beta1";
import { Module as CosmosGroupV1, msgTypes as CosmosGroupV1MsgTypes } from "./cosmos.group.v1";
import { Module as CosmosMintV1Beta1, msgTypes as CosmosMintV1Beta1MsgTypes } from "./cosmos.mint.v1beta1";
import { Module as CosmosNftV1Beta1, msgTypes as CosmosNftV1Beta1MsgTypes } from "./cosmos.nft.v1beta1";
import { Module as CosmosParamsV1Beta1, msgTypes as CosmosParamsV1Beta1MsgTypes } from "./cosmos.params.v1beta1";
import { Module as CosmosSlashingV1Beta1, msgTypes as CosmosSlashingV1Beta1MsgTypes } from "./cosmos.slashing.v1beta1";
import { Module as CosmosStakingV1Beta1, msgTypes as CosmosStakingV1Beta1MsgTypes } from "./cosmos.staking.v1beta1";
import { Module as CosmosTxV1Beta1, msgTypes as CosmosTxV1Beta1MsgTypes } from "./cosmos.tx.v1beta1";
import { Module as CosmosUpgradeV1Beta1, msgTypes as CosmosUpgradeV1Beta1MsgTypes } from "./cosmos.upgrade.v1beta1";
import { Module as CosmosVestingV1Beta1, msgTypes as CosmosVestingV1Beta1MsgTypes } from "./cosmos.vesting.v1beta1";
import { Module as IbcApplicationsInterchainAccountsControllerV1, msgTypes as IbcApplicationsInterchainAccountsControllerV1MsgTypes } from "./ibc.applications.interchain_accounts.controller.v1";
import { Module as IbcApplicationsInterchainAccountsHostV1, msgTypes as IbcApplicationsInterchainAccountsHostV1MsgTypes } from "./ibc.applications.interchain_accounts.host.v1";
import { Module as IbcApplicationsTransferV1, msgTypes as IbcApplicationsTransferV1MsgTypes } from "./ibc.applications.transfer.v1";
import { Module as IbcCoreChannelV1, msgTypes as IbcCoreChannelV1MsgTypes } from "./ibc.core.channel.v1";
import { Module as IbcCoreClientV1, msgTypes as IbcCoreClientV1MsgTypes } from "./ibc.core.client.v1";
import { Module as IbcCoreConnectionV1, msgTypes as IbcCoreConnectionV1MsgTypes } from "./ibc.core.connection.v1";
import { Module as SaonetworkSaoDid, msgTypes as SaonetworkSaoDidMsgTypes } from "./saonetwork.sao.did";
import { Module as SaonetworkSaoModel, msgTypes as SaonetworkSaoModelMsgTypes } from "./saonetwork.sao.model";
import { Module as SaonetworkSaoNode, msgTypes as SaonetworkSaoNodeMsgTypes } from "./saonetwork.sao.node";
import { Module as SaonetworkSaoOrder, msgTypes as SaonetworkSaoOrderMsgTypes } from "./saonetwork.sao.order";
import { Module as SaonetworkSaoSao, msgTypes as SaonetworkSaoSaoMsgTypes } from "./saonetwork.sao.sao";
var Client = IgniteClient.plugin([
    CosmosAuthV1Beta1,
    CosmosAuthzV1Beta1,
    CosmosBankV1Beta1,
    CosmosBaseTendermintV1Beta1,
    CosmosCrisisV1Beta1,
    CosmosDistributionV1Beta1,
    CosmosEvidenceV1Beta1,
    CosmosFeegrantV1Beta1,
    CosmosGovV1,
    CosmosGovV1Beta1,
    CosmosGroupV1,
    CosmosMintV1Beta1,
    CosmosNftV1Beta1,
    CosmosParamsV1Beta1,
    CosmosSlashingV1Beta1,
    CosmosStakingV1Beta1,
    CosmosTxV1Beta1,
    CosmosUpgradeV1Beta1,
    CosmosVestingV1Beta1,
    IbcApplicationsInterchainAccountsControllerV1,
    IbcApplicationsInterchainAccountsHostV1,
    IbcApplicationsTransferV1,
    IbcCoreChannelV1,
    IbcCoreClientV1,
    IbcCoreConnectionV1,
    SaonetworkSaoDid,
    SaonetworkSaoModel,
    SaonetworkSaoNode,
    SaonetworkSaoOrder,
    SaonetworkSaoSao
]);
var registry = new Registry(_toConsumableArray(CosmosAuthV1Beta1MsgTypes).concat(_toConsumableArray(CosmosAuthzV1Beta1MsgTypes), _toConsumableArray(CosmosBankV1Beta1MsgTypes), _toConsumableArray(CosmosBaseTendermintV1Beta1MsgTypes), _toConsumableArray(CosmosCrisisV1Beta1MsgTypes), _toConsumableArray(CosmosDistributionV1Beta1MsgTypes), _toConsumableArray(CosmosEvidenceV1Beta1MsgTypes), _toConsumableArray(CosmosFeegrantV1Beta1MsgTypes), _toConsumableArray(CosmosGovV1MsgTypes), _toConsumableArray(CosmosGovV1Beta1MsgTypes), _toConsumableArray(CosmosGroupV1MsgTypes), _toConsumableArray(CosmosMintV1Beta1MsgTypes), _toConsumableArray(CosmosNftV1Beta1MsgTypes), _toConsumableArray(CosmosParamsV1Beta1MsgTypes), _toConsumableArray(CosmosSlashingV1Beta1MsgTypes), _toConsumableArray(CosmosStakingV1Beta1MsgTypes), _toConsumableArray(CosmosTxV1Beta1MsgTypes), _toConsumableArray(CosmosUpgradeV1Beta1MsgTypes), _toConsumableArray(CosmosVestingV1Beta1MsgTypes), _toConsumableArray(IbcApplicationsInterchainAccountsControllerV1MsgTypes), _toConsumableArray(IbcApplicationsInterchainAccountsHostV1MsgTypes), _toConsumableArray(IbcApplicationsTransferV1MsgTypes), _toConsumableArray(IbcCoreChannelV1MsgTypes), _toConsumableArray(IbcCoreClientV1MsgTypes), _toConsumableArray(IbcCoreConnectionV1MsgTypes), _toConsumableArray(SaonetworkSaoDidMsgTypes), _toConsumableArray(SaonetworkSaoModelMsgTypes), _toConsumableArray(SaonetworkSaoNodeMsgTypes), _toConsumableArray(SaonetworkSaoOrderMsgTypes), _toConsumableArray(SaonetworkSaoSaoMsgTypes)));
export { Client, registry, MissingWalletError };
