// Generated by Ignite ignite.com/cli
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from "./registry";
import { Api } from "./rest";
export var registry = new Registry(msgTypes);
var defaultFee = {
    amount: [],
    gas: "200000"
};
export var txClient = function() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        addr: "http://localhost:26657",
        prefix: "cosmos"
    }, signer = _ref.signer, prefix = _ref.prefix, addr = _ref.addr;
    return {};
};
export var queryClient = function() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        addr: "http://localhost:1317"
    }, addr = _ref.addr;
    return new Api({
        baseURL: addr
    });
};
var SDKModule = /*#__PURE__*/ function() {
    "use strict";
    function SDKModule(client) {
        var _this = this;
        _classCallCheck(this, SDKModule);
        this.registry = [];
        this.query = queryClient({
            addr: client.env.apiURL
        });
        this.updateTX(client);
        client.on("signer-changed", function(signer) {
            _this.updateTX(client);
        });
    }
    var _proto = SDKModule.prototype;
    _proto.updateTX = function updateTX(client) {
        var _client_env_prefix;
        var methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: (_client_env_prefix = client.env.prefix) !== null && _client_env_prefix !== void 0 ? _client_env_prefix : "cosmos"
        });
        this.tx = methods;
        for(var m in methods){
            this.tx[m] = methods[m].bind(this.tx);
        }
    };
    return SDKModule;
}();
var Module = function(test) {
    return {
        module: {
            IbcApplicationsInterchainAccountsControllerV1: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default Module;
